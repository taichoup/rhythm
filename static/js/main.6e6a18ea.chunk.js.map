{"version":3,"sources":["Circle.js","App.js","serviceWorker.js","index.js"],"names":["Circle","props","signatures","map","item","replace","signature","rhythm","className","i","indexOf","spin","label","bembe","r","splice","concat","App","useState","bpm","setBpm","isRunning","setIsRunning","useEffect","blipper","document","getElementById","timer","setInterval","elt","classList","add","setTimeout","remove","clearInterval","id","type","name","min","max","step","onChange","event","target","value","onMouseUp","circles","getElementsByClassName","forEach","style","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAGO,SAASA,EAAOC,GAErB,IAUMC,EAAa,CACjB,EAXgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrCC,KAAI,SAAAC,GAAI,mBAAiB,GAAPA,EAAS,IAW5B,EATkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACpDD,KAAI,SAAAC,GAAI,mBAAiB,GAAPA,EAAS,IAS5B,EAPiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACnED,KAAI,SAAAC,GAAI,mBAAiB,KAAPA,EAAW,IAC7BD,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAQ,OAAQ,IAAI,KAQlCC,EAAYL,EAAMK,UAClBC,EAASN,EAAMM,OAErB,OACE,sBAAKC,UAAU,UAAS,UACtB,sBAAKA,UAAU,mBAAkB,UAC9BN,EAAWD,EAAMK,WACfH,KACC,SAAAM,GAAC,OAAI,sBAAMD,UAAS,UAAKC,GAAC,OAAGF,EAAOL,EAAWI,GAAWI,QAAQD,IAAM,OAAO,IAAK,SAAC,qBAAKD,UAAU,YAAsB,IAI5H,OAGJ,qBAAKA,UAAS,iBAAYP,EAAMU,KAAO,gBAAkB,MACzD,sBAAMH,UAAU,iBAAgB,SAAEP,EAAMW,UAG9C,C,gBC/BMC,EAAQ,CAEZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAElC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAElC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAElC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCV,KAAI,SAAAW,GAAC,OAAIA,EAAEC,OAZI,GAYaC,OAAOF,EAAE,IA+DxBG,MA5Df,WAEE,MAAsBC,mBAAS,IAAG,mBAA3BC,EAAG,KAAEC,EAAM,KAClB,EAAkCF,oBAAS,GAAM,mBAA1CG,EAAS,KAAEC,EAAY,KA8B9B,OAdAC,qBAAU,WACR,IAAMC,EAAUC,SAASC,eAAe,QAKxC,GAAIL,EAAW,CACb,IAAIM,EAAQC,aAAY,WAL1B,IAAkBC,KAMLL,GALPM,UAAUC,IAAI,YAClBC,YAAW,kBAAMH,EAAIC,UAAUG,OAAO,WAAW,GAAE,IAKnD,GAAG,GAAKd,EAAM,KACd,OAAO,kBAAMe,cAAcP,EAAO,CACpC,CACF,IAGE,sBAAKnB,UAAU,MAAK,UAElB,sBAAK2B,GAAG,cAAa,UACnB,uBAAOC,KAAK,QAAQD,GAAG,MAAME,KAAK,MAAMC,IAAI,KAAKC,IAAI,MAAMC,KAAK,IAAIC,SAhClD,SAACC,GACvBtB,EAAOsB,EAAMC,OAAOC,MACtB,EA8BqGC,UA5BjF,WAClB,IAAMC,EAAUrB,SAASsB,uBAAuB,UAChD,YAAID,GAASE,SAAQ,SAAAnB,GAAG,OAAIA,EAAIoB,MAAM,sBAAqB,UAAM,GAAK9B,EAAM,EAAC,IAAG,GAClF,IA0BM,sBAAMX,UAAU,MAAK,mBAAKW,EAAG,aAG/B,sBAAKgB,GAAG,kBAAiB,UACvB,cAACnC,EAAM,CAACW,KAAMU,EAAWT,MAAM,YAAYN,UAzDlC,EAyDuDC,OAAQM,EAAM,KAC9E,cAACb,EAAM,CAACW,KAAMU,EAAWT,MAAM,YAAYN,UA1DlC,EA0DuDC,OAAQM,EAAM,KAC9E,cAACb,EAAM,CAACW,KAAMU,EAAWT,MAAM,aAAaN,UA3DnC,EA2DwDC,OAAQM,EAAM,KAC/E,cAACb,EAAM,CAACW,KAAMU,EAAWT,MAAM,aAAaN,UA5DnC,EA4DwDC,OAAQM,EAAM,QAGjF,sBAAKsB,GAAG,mBAAkB,UACxB,wBACEA,GAAG,MACH3B,UAAS,cAASa,EAAY,cAAgB,eAC9C6B,QAAS,WArCf5B,GAAcD,EAqCqB,EAAC,SAC9BA,EAAY,OAAS,WACvB,qBAAKc,GAAG,cAIhB,ECnEoBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENjC,SAASC,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,QACtB,G","file":"static/js/main.6e6a18ea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// props are spin, label, signature, rhythm\r\nexport function Circle(props) {\r\n\r\n  const twoByFour = [0, 1, 2, 3, 4, 5, 6, 7]\r\n    .map(item => `deg${item * 45}`); \r\n\r\n  const threeByFour = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n    .map(item => `deg${item * 30}`);\r\n\r\n  const fourByFour = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n    .map(item => `deg${item * 22.5}`)\r\n    .map(item => item.replace(/\\./gi, '-'));\r\n\r\n  const signatures = {\r\n    \"2\": twoByFour,\r\n    \"3\": threeByFour,\r\n    \"4\": fourByFour\r\n  }\r\n\r\n  const signature = props.signature;\r\n  const rhythm = props.rhythm;\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      <div className='circle-container'>\r\n        {signatures[props.signature]\r\n          .map(\r\n            i => <span className={`${i}${rhythm[signatures[signature].indexOf(i)] ? \" hit\":\"\"}`}><div className=\"marker\"></div></span>\r\n          )\r\n          // .map(\r\n          //   i => props.rhythm[signatures[props.signature].indexOf(i)] ?\r\n          // )\r\n        };\r\n      </div>\r\n      <div className={`circle ${props.spin ? \"circle-rotate\" : \"\"}`}></div>\r\n      <span className='bodypart-label'>{props.label}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState , useEffect } from 'react';\r\nimport { Circle } from './Circle';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\n\r\nconst division = 3;\r\n\r\n// c'est décalé! il faut décaler de trois index vers la gauche\r\nconst bembe = [\r\n  // left foot\r\n  [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\r\n  // left hand\r\n  [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],\r\n  // right hand\r\n  [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],\r\n  // right foot\r\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n].map(r => r.splice(division).concat(r));\r\n\r\n\r\nfunction App() {\r\n\r\n  const [bpm, setBpm] = useState(60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  const handleUserInput = (event) => {\r\n    setBpm(event.target.value);\r\n  }\r\n\r\n  const updateSpeed = () => {\r\n    const circles = document.getElementsByClassName(\"circle\");\r\n    [...circles].forEach(elt => elt.style[\"animation-duration\"] = `${60 / bpm * 4}s`)\r\n  }\r\n\r\n  function toggleRotate() {\r\n    setIsRunning(!isRunning);\r\n  }\r\n\r\n  // METRONOME (not working really well... first blip is too long)\r\n  useEffect(() => {\r\n    const blipper = document.getElementById(\"blip\");\r\n    function showBlip(elt) {\r\n      elt.classList.add(\"blipping\");\r\n      setTimeout(() => elt.classList.remove(\"blipping\"), 100);\r\n    }\r\n    if (isRunning) {\r\n      let timer = setInterval(() => {\r\n        showBlip(blipper);\r\n      }, 60 / bpm * 1000);  \r\n      return () => clearInterval(timer);\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div id=\"bpm-wrapper\">\r\n        <input type=\"range\" id=\"bpm\" name=\"bpm\" min=\"60\" max=\"240\" step=\"1\" onChange={handleUserInput} onMouseUp={updateSpeed}/>\r\n        <span className=\"bpm\">{`${bpm} BPM`}</span>\r\n      </div>\r\n\r\n      <div id=\"circles-wrapper\">\r\n        <Circle spin={isRunning} label=\"Left foot\" signature={division} rhythm={bembe[0]}/>\r\n        <Circle spin={isRunning} label=\"Left hand\" signature={division} rhythm={bembe[1]}/>\r\n        <Circle spin={isRunning} label=\"Right hand\" signature={division} rhythm={bembe[2]}/>\r\n        <Circle spin={isRunning} label=\"Right foot\" signature={division} rhythm={bembe[3]}/>\r\n      </div>\r\n\r\n      <div id=\"controls-wrapper\">\r\n        <button \r\n          id=\"btn\"\r\n          className={`btn ${isRunning ? \"btn-warning\" : \"btn-primary\"}`}\r\n          onClick={() => toggleRotate()}\r\n        >{isRunning ? \"Stop\" : \"Start!\"}</button>\r\n        <div id=\"blip\"></div>\r\n      </div>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}